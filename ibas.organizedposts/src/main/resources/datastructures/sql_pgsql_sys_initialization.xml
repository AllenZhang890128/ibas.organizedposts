<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE DataStructureOrchestration>
<ns2:DataStructureOrchestration
    xmlns:ns2="http://colorcoding.org/btulz/transformers">
    <Name>sql_pgsql_ibas_initialization</Name>
    <Description>基于PGSQL的结构映射说明</Description>
    <Integrated>true</Integrated>
    <DriverName>org.postgresql.Driver</DriverName>
    <DbUrl>jdbc:postgresql://${DbServer}:${DbPort}/${DbName}</DbUrl>
    <DbUser>${DbUser}</DbUser>
    <DbPassword>${DbPassword}</DbPassword>
    <Action Name="create stored procedures ${Company}_SYS_SP_GET_USER_MODULES">
        <Step Name="check and drop exists stored procedures">
            <Script>
                DROP FUNCTION IF EXISTS "${Company}_SYS_SP_GET_USER_MODULES"(character varying, character varying);
            </Script>
        </Step>
        <Step Name="check and drop exists return type">
            <Script>
                DROP TYPE IF EXISTS "RESULT_TYPE_${Company}_SYS_SP_GET_USER_MODULES";
            </Script>
        </Step>
        <Step Name="create return type">
            <Script>
                CREATE TYPE "RESULT_TYPE_${Company}_SYS_SP_GET_USER_MODULES" AS ("ModuleId" character varying,"ModuleName" character varying,"ModuleCategory" character varying,"ModuleEntry" character varying);
            </Script>
        </Step>
        <Step Name="create stored procedures">
            <Script>
                CREATE OR REPLACE FUNCTION "${Company}_SYS_SP_GET_USER_MODULES" (
                    platform character varying,        /*平台代码*/
                    userCode character varying         /*用户编码*/
                ) RETURNS SETOF "RESULT_TYPE_${Company}_SYS_SP_GET_USER_MODULES" AS $_$
                DECLARE
                    result record;
                    platform2 character varying;           /*平台代码*/
                BEGIN
                    IF (platform = 'DESKTOP' OR platform = 'TABLET') THEN
                        platform2 = 'COMBINATION';
                    ELSE
                        platform2 = platform;
                    END IF;

                    IF EXISTS (SELECT 0 FROM "${Company}_SYS_USER" WHERE "Code" = userCode AND "Super" = 'Y') THEN
                        /* 超级用户全部权限 */
                        FOR result IN
                            SELECT A."ModuleId",A."ModuleName",A."ModuleCategory",A."ModuleEntry"
                            FROM "${Company}_SYS_MODULE" A
                            WHERE (A."PlatformId" = platform OR A."PlatformId" = platform2) AND A."Activated" = 'Y'
                        LOOP
                          return next result;
                        END LOOP;
                    ELSE
                        /* 非超级用户，角色权限 */
                        FOR result IN
                            SELECT A."ModuleId",A."ModuleName",A."ModuleCategory",A."ModuleEntry"
                            FROM "${Company}_SYS_MODULE" A INNER JOIN (
                                SELECT DISTINCT B."ModuleId",B."AuthValue"
                                FROM "${Company}_SYS_PRIVILEGE" B
                                WHERE (B."PlatformId" = platform OR B."PlatformId" = platform2) AND B."Activated" = 'Y' AND B."AuthValue" &lt;&gt; 'N' AND B."RoleCode" IN (
                                    SELECT "Position"
                                    FROM "${Company}_OP_POST"
                                    WHERE "ValidDate" &lt;= current_date AND "InvalidDate" &gt;= current_date AND "UserCode" = userCode
                                    )
                            ) C ON A."ModuleId" = C."ModuleId"
                            WHERE (A."PlatformId" = platform OR A."PlatformId" = platform2) AND A."Activated" = 'Y'
                        LOOP
                          return next result;
                        END LOOP;
                    END IF;
                END;
                $_$ LANGUAGE plpgsql;
            </Script>
        </Step>
    </Action>
    <Action Name="create stored procedures ${Company}_SYS_SP_GET_USER_PRIVILEGES">
        <Step Name="check and drop exists stored procedures">
            <Script>
                DROP FUNCTION IF EXISTS "${Company}_SYS_SP_GET_USER_PRIVILEGES"(character varying, character varying);
            </Script>
        </Step>
        <Step Name="check and drop exists return type">
            <Script>
                DROP TYPE IF EXISTS "RESULT_TYPE_${Company}_SYS_SP_GET_USER_PRIVILEGES";
            </Script>
        </Step>
        <Step Name="create return type">
            <Script>
                CREATE TYPE "RESULT_TYPE_${Company}_SYS_SP_GET_USER_PRIVILEGES" AS ("Source" character varying, "Target" character varying, "Value" character varying);
            </Script>
        </Step>
        <Step Name="create stored procedures">
            <Script>
                CREATE OR REPLACE FUNCTION "${Company}_SYS_SP_GET_USER_PRIVILEGES" (
                    platform character varying,        /*平台代码*/
                    userCode character varying         /*用户编码*/
                ) RETURNS SETOF "RESULT_TYPE_${Company}_SYS_SP_GET_USER_PRIVILEGES" AS $_$
                DECLARE
                    result record;
                    platform2 character varying;           /*平台代码*/
                BEGIN
                    IF (platform = 'DESKTOP' OR platform = 'TABLET') THEN
                        platform2 = 'COMBINATION';
                    ELSE
                        platform2 = platform;
                    END IF;

                    IF EXISTS (SELECT 0 FROM "${Company}_SYS_USER" WHERE "Code" = userCode AND "Super" = 'Y') THEN
                        /* 超级用户全部权限 */
                        FOR result IN
                            SELECT 'M' "Source", "ModuleId" "Target", "AuthValue" "Value"
                            FROM "${Company}_SYS_PRIVILEGE"
                            LIMIT 0
                        LOOP
                          return next result;
                        END LOOP;
                    ELSE
                        -- 非超级用户，角色权限
                        -- 业务对象的权限设置
                        FOR result IN
                            SELECT 'B' "Source", "BOCode" "Target", COALESCE(T1."Permission",T0."Permission") "Value"
                            FROM "${Company}_OP_OWNR" T0 LEFT JOIN "${Company}_OP_WNR1" T1 ON T0."ObjectKey"=T1."ObjectKey" AND T1."ItemSign"='S'
                            WHERE "UserCode" = userCode AND "Activated" = 'Y'
                            UNION ALL
                            SELECT "Source", "Target", "Value"
                            FROM (
                                -- 模块的权限设置
                                SELECT 'M' "Source", "ModuleId" "Target", "AuthValue" "Value", "RoleCode"
                                FROM "${Company}_SYS_PRIVILEGE"
                                WHERE ("PlatformId" = platform OR "PlatformId" = platform2) AND "Activated" = 'Y' AND COALESCE("Target",'') = ''
                                UNION ALL
                                -- 应用的权限设置
                                SELECT 'A' "Source", "Target" "Target", "AuthValue" "Value", "RoleCode"
                                FROM "${Company}_SYS_PRIVILEGE"
                                WHERE ("PlatformId" = platform OR "PlatformId" = platform2) AND "Activated" = 'Y' AND COALESCE("Target",'') &lt;&gt; ''
                            ) T0
                            WHERE T0."RoleCode" IN (
                                SELECT "Position"
                                FROM "${Company}_OP_POST"
                                WHERE "ValidDate" &lt;= current_date AND "InvalidDate" &gt;= current_date AND "UserCode" = userCode
                            )
                        LOOP
                          return next result;
                        END LOOP;
                    END IF;
                END;
                $_$ LANGUAGE plpgsql;
            </Script>
        </Step>
    </Action>
</ns2:DataStructureOrchestration>